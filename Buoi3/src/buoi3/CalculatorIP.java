/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package buoi3;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;
import javax.swing.JOptionPane;

/**
 *
 * @author Hieu Pham
 */
public class CalculatorIP extends javax.swing.JFrame {

    /**
     * Creates new form CalculatorIP
     */
    public CalculatorIP() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldOctect1 = new javax.swing.JTextField();
        jTextFieldOctect2 = new javax.swing.JTextField();
        jTextFieldOctect3 = new javax.swing.JTextField();
        jTextFieldOctect4 = new javax.swing.JTextField();
        jTextFieldSubMask = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButtonCalc = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldIPBinary = new javax.swing.JTextField();
        jTextFieldMaskIp = new javax.swing.JTextField();
        jTextFieldMaskBinary = new javax.swing.JTextField();
        jTextFieldNetworkIp = new javax.swing.JTextField();
        jTextFieldNetworkBinary = new javax.swing.JTextField();
        jTextFieldBroadcastIp = new javax.swing.JTextField();
        jTextFieldBroadcastBinary = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("IP");

        jTextFieldOctect1.setText("192");

        jTextFieldOctect2.setText("168");

        jTextFieldOctect3.setText("1");

        jTextFieldOctect4.setText("0");
        jTextFieldOctect4.setToolTipText("");

        jTextFieldSubMask.setText("24");

        jLabel2.setText("/");

        jButtonCalc.setText("Tính");
        jButtonCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalcActionPerformed(evt);
            }
        });

        jLabel3.setText("Địa chỉ IP nhị phân");

        jLabel4.setText("Địa chỉ Mask");

        jLabel5.setText("Mask nhị phân");

        jLabel6.setText("Địa chỉ network");

        jLabel7.setText("Network nhị phân");

        jLabel8.setText("Địa chỉ Broadcast");

        jLabel9.setText("Broadcast nhị phân");

        jTextFieldIPBinary.setEditable(false);
        jTextFieldIPBinary.setFocusCycleRoot(true);

        jTextFieldMaskIp.setEditable(false);
        jTextFieldMaskIp.setFocusCycleRoot(true);

        jTextFieldMaskBinary.setEditable(false);
        jTextFieldMaskBinary.setFocusCycleRoot(true);

        jTextFieldNetworkIp.setEditable(false);
        jTextFieldNetworkIp.setFocusCycleRoot(true);

        jTextFieldNetworkBinary.setEditable(false);
        jTextFieldNetworkBinary.setFocusCycleRoot(true);

        jTextFieldBroadcastIp.setEditable(false);
        jTextFieldBroadcastIp.setFocusCycleRoot(true);

        jTextFieldBroadcastBinary.setEditable(false);
        jTextFieldBroadcastBinary.setFocusCycleRoot(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel1)
                        .addGap(38, 38, 38)
                        .addComponent(jTextFieldOctect1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldOctect2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldOctect3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldOctect4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldSubMask, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCalc))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextFieldIPBinary, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9))
                                .addGap(46, 46, 46)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextFieldMaskIp, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldMaskBinary, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldNetworkIp, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldNetworkBinary, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldBroadcastIp, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldBroadcastBinary, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldOctect1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldOctect2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldOctect3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldOctect4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldSubMask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButtonCalc))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldIPBinary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldMaskIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldMaskBinary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldNetworkIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldNetworkBinary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextFieldBroadcastIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextFieldBroadcastBinary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static String addDotsToBinaryIP(String binaryIP) {
        StringBuilder dottedBinaryIP = new StringBuilder();

        for (int i = 0; i < binaryIP.length(); i++) {
            dottedBinaryIP.append(binaryIP.charAt(i));

            if ((i + 1) % 8 == 0 && i != binaryIP.length() - 1) {
                dottedBinaryIP.append('.');
            }
        }

        return dottedBinaryIP.toString();
    }

    private String convertToBinary(int decimal) {
        String binary = Integer.toBinaryString(decimal);
        while (binary.length() < 8) {
            binary = "0" + binary;
        }
        return binary;
    }

    public static String calculateSubnetMask(int prefixLength) {
        StringBuilder subnetMask = new StringBuilder();

        int fullOctets = prefixLength / 8;
        int remainingBits = prefixLength % 8;

        for (int i = 0; i < fullOctets; i++) {
            subnetMask.append("255");

            if (i < 3) {
                subnetMask.append(".");
            }
        }

        if (remainingBits > 0) {
            int value = 256 - (int) Math.pow(2, 8 - remainingBits);
            subnetMask.append(value);

            if (fullOctets < 3) {
                subnetMask.append(".");
            }
        } else {
            subnetMask.append("0");
        }

        return subnetMask.toString();
    }

    public static String convertMaskoBinary(String ipAddress) {
        String[] octect = ipAddress.split("\\.");
        StringBuilder binaryIP = new StringBuilder();

        for (String octet : octect) {
            int value = Integer.parseInt(octet);
            String binaryOctet = String.format("%8s", Integer.toBinaryString(value)).replace(' ', '0');
            binaryIP.append(binaryOctet);
        }

        return binaryIP.toString();
    }

    public static String calculateNetworkAddress(String ipAddress, String subnetMask) {
        try {
            InetAddress ip = InetAddress.getByName(ipAddress);
            InetAddress subnet = InetAddress.getByName(subnetMask);

            byte[] ipBytes = ip.getAddress();
            byte[] subnetBytes = subnet.getAddress();

            byte[] networkBytes = new byte[ipBytes.length];

            for (int i = 0; i < ipBytes.length; i++) {
                networkBytes[i] = (byte) (ipBytes[i] & subnetBytes[i]);
            }

            InetAddress networkAddress = InetAddress.getByAddress(networkBytes);
            String networkAddressStr = networkAddress.getHostAddress();

            return networkAddressStr;

        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        return "0";
    }

    public static String networkToBinary(String binaryIP, int prefixLength) {
        StringBuilder network = new StringBuilder();

        for (int i = 0; i < binaryIP.length(); i++) {
            if (i < prefixLength) {
                network.append(binaryIP.charAt(i));
            } else {
                network.append('0');
            }
        }

        return network.toString();
    }


    private void jButtonCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalcActionPerformed
        // TODO add your handling code here:
        int octect1 = Integer.parseInt(jTextFieldOctect1.getText());
        int octect2 = Integer.parseInt(jTextFieldOctect2.getText());
        int octect3 = Integer.parseInt(jTextFieldOctect3.getText());
        int octect4 = Integer.parseInt(jTextFieldOctect4.getText());
        int subnetMask = Integer.parseInt(jTextFieldSubMask.getText());
        String ipAddress = jTextFieldOctect1.getText() + "." + jTextFieldOctect2.getText() + "." + jTextFieldOctect3.getText() + "." + jTextFieldOctect4.getText();
        String subMask = jTextFieldSubMask.getText();

        String binaryIP = convertToBinary(octect1) + "."
                + convertToBinary(octect2) + "."
                + convertToBinary(octect3) + "."
                + convertToBinary(octect4);
        jTextFieldIPBinary.setText(binaryIP);

        String subnetMaskStr = calculateSubnetMask(subnetMask);
        jTextFieldMaskIp.setText(subnetMaskStr);

        String maskToBinary = convertMaskoBinary(subnetMaskStr);
        jTextFieldMaskBinary.setText(addDotsToBinaryIP(maskToBinary));

        jTextFieldNetworkIp.setText(calculateNetworkAddress(ipAddress, subnetMaskStr));
    }//GEN-LAST:event_jButtonCalcActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculatorIP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculatorIP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculatorIP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculatorIP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalculatorIP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCalc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextFieldBroadcastBinary;
    private javax.swing.JTextField jTextFieldBroadcastIp;
    private javax.swing.JTextField jTextFieldIPBinary;
    private javax.swing.JTextField jTextFieldMaskBinary;
    private javax.swing.JTextField jTextFieldMaskIp;
    private javax.swing.JTextField jTextFieldNetworkBinary;
    private javax.swing.JTextField jTextFieldNetworkIp;
    private javax.swing.JTextField jTextFieldOctect1;
    private javax.swing.JTextField jTextFieldOctect2;
    private javax.swing.JTextField jTextFieldOctect3;
    private javax.swing.JTextField jTextFieldOctect4;
    private javax.swing.JTextField jTextFieldSubMask;
    // End of variables declaration//GEN-END:variables
}
